#+TITLE: Dotfiles
#+AUTHOR: Christopher James Hayward
#+EMAIL: chris@chrishayward.xyz

#+PROPERTY: header-args:emacs-lisp :comments org
#+PROPERTY: header-args            :results silent :eval no-export

#+OPTIONS: num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS: skip:nil author:nil email:nil creator:nil timestamp:nil

#+ATTR_ORG:   :width 420px
#+ATTR_HTML:  :width 420px
#+ATTR_LATEX: :width 420px
[[./docs/images/desktop-alt.png]]

Immutable GNU Emacs dotfiles. Built for Life, Liberty, and the Open Road.

+ 100% Literate
+ 100% Immutable
+ 100% Reproducible
  
* Init
:PROPERTIES:
:header-args: :tangle init.el
:END:

Here's a complete list of all of the options configurable for each host, and their default values.  All variables prefixed with ~dotfiles/~. If you need to make configurations to another variable, consider creating a new option. 

#+begin_src emacs-lisp
(defvar dotfiles/font 
  "Fira Code" 
  "Unified system font family.")

(defvar dotfiles/font-size 
  96 
  "Unified system font size.")

(defvar dotfiles/browser 
  (getenv "BROWSER") 
  "Default system web browser.")

(defvar dotfiles/language 
  (getenv "LANG") 
  "Default system dictionary language.")

(defconst dotfiles/modules-p 
  '(core 
    editor
    ;; email
    desktop
    writing
    website
    capture
    projects
    interface) 
  "All of the available modules.")

(defvar dotfiles/modules 
  dotfiles/modules-p 
  "All of the enabled modules.")

(defvar dotfiles/home 
  user-emacs-directory 
  "Original value of `user-emacs-directory'.")

(defvar dotfiles/cache 
  (expand-file-name "~/.cache/emacs") 
  "Redirection target of `user-emacs-directory'.")

(defvar dotfiles/idle 
  0.0 
  "Delay time before offering suggestions and completions.")

(defvar dotfiles/leader-key 
  "SPC" 
  "All powerful leader key.")

(defvar dotfiles/leader-key-global 
  (concat "C-" dotfiles/leader-key) 
  "Global prefix for the leader key.")

(defvar dotfiles/projects 
  (expand-file-name "~/.local/source/") 
  "Location of source code projects.")

(defvar dotfiles/passwords 
  (expand-file-name "~/.password-store/") 
  "Location of local password store.")

(defvar dotfiles/public-key 
  "37AB1CB72B741E478CA026D43025DCBD46F81C0F" 
  "GPG key to encrypt org files for.")
#+end_src

** Hosts

 Each host machines configuration is loaded immediately after the options are declared, before any configuration is applied. This allows system to system control while remaining immutable. Override any of the available options configurations in a host file. Here's some examples to get started:

 + [[file:hosts/localhost.org][Termux]]
 + [[file:hosts/raspberry.org][Raspberry]]
 + [[file:hosts/acernitro.org][Acernitro]]
 + [[file:hosts/virtualbox.org][Virtualbox]]

 Begin the process by loading any host specific overrides. The host configuration tangles, and loads (if it exist) using the systems name.

 #+begin_src emacs-lisp
 (let ((host-file (concat dotfiles/home "/hosts/" system-name ".org")))
   (when (file-exists-p host-file)
     (org-babel-load-file host-file)))
 #+end_src

** Modules

 Breaking down the project into logical units or chapters to keep the code more maintainable and organized. This is also a fundamental requirement to achieve the goal of modularity. Here are all of the available modules, also listed in the variable ~dotfiles/modules-p~. 

 + [[file:modules/core.org][Core]]
 + [[file:modules/editor.org][Editor]]
 + [[file:modules/email.org][Email]]
 + [[file:modules/desktop.org][Desktop]]
 + [[file:modules/writing.org][Writing]]
 + [[file:modules/website.org][Website]]
 + [[file:modules/projects.org][Projects]]
 + [[file:modules/interface.org][Interface]]

 By default all of the modules will load, override the variable ~dotfiles/modules~ in a host configuration to override this.

 #+begin_src emacs-lisp
 (dolist (m dotfiles/modules)
   (let ((mod-file (concat dotfiles/home "/modules/" (symbol-name m) ".org")))
     (when (file-exists-p mod-file)
       (org-babel-load-file mod-file))))
 #+end_src
# ** Lines

# Relative line numbers are important when using =VI= emulation keys. You can prefix most commands with a *number*, allowing you to jump up / down by a line count.

# #+begin_example
#   5:
#   4:
#   3:
#   2:
#   1:
# 156: << CURRENT LINE >>
#   1:
#   2:
#   3:
#   4:
#   5:
# #+end_example

# https://github.com/emacsmirror/linum-relative
# + Integrate with ~display-line-numbers-mode~ for performance

# #+begin_src emacs-lisp
# (use-package linum-relative
#   :commands (linum-relative-global-mode)
#   :custom (linum-relative-backend 'display-line-numbers-mode))
# #+end_src

# Add line numbers to the toggles behind =SPC t l=.

# #+begin_src emacs-lisp
# (dotfiles/leader
#   "tl" '(linum-relative-global-mode :which-key "Lines"))
# #+end_src

# https://github.com/Fanael/rainbow-delimiters
# + Colourize nested parenthesis

# #+begin_src emacs-lisp
# (use-package rainbow-delimiters
#   :hook (prog-mode . rainbow-delimiters-mode))
# #+end_src

# ** Themes

# #+ATTR_ORG: :width 420px
# #+ATTR_HTML: :width 420px
# #+ATTR_LATEX: :width 420px
# [[./docs/images/what-is-emacs-customizable.gif]]

# Cherry pick a few modules from =doom-emacs=. High quality and modern colour themes are provided in the [[https://github.com/hlissner/emacs-doom-themes][doom-themes]] package.

# #+begin_src emacs-lisp
# (use-package doom-themes
#   :init (load-theme 'doom-moonlight t))
# #+end_src

# [[https://github.com/seagle0128/doom-modeline][doom-modeline]] provides an elegant status bar / modeline.

# #+begin_src emacs-lisp
# (use-package doom-modeline
#   :custom (doom-modeline-height 16)
#   :config (doom-modeline-mode 1))
# #+end_src

# Load a theme with =SPC t t=.

# #+begin_src emacs-lisp
# (dotfiles/leader
#   "tt" '(counsel-load-theme t t :which-key "Theme"))
# #+end_src

# ** Pretty

# Make programming buffers prettier with [[https://github.com/pretty-mode/pretty-mode][pretty-mode]], complimentary to the built in ~prettify-symbols-mode~. 

# #+begin_src emacs-lisp
# (use-package pretty-mode
#   :hook (python-mode . turn-on-pretty-mode))
# #+end_src

# ** Ligatures

# Enable font ligatures via [[https://github.com/jming422/fira-code-mode][fira-code-mode]], perform this action *only* when ~Fira Code~ is the current font.

# #+begin_src emacs-lisp
# (when (display-graphic-p)
#   (use-package fira-code-mode
#     :hook (prog-mode org-mode)))
# #+end_src

# Toggle global ligature mode with =SPC t g=.

# #+begin_src emacs-lisp
# (dotfiles/leader
#   "tg" '(global-fira-code-mode :which-key "Ligatures"))
# #+end_src

# ** Dashboard

# #+ATTR_ORG: :width 420px
# #+ATTR_HTML: :width 420px
# #+ATTR_LATEX: :width 420px
# [[./docs/images/desktop.png]]

# Present a dashboard when first launching Emacs. Customize the buttons of the navigator:

# + Brain @ http://localhost:8080
# + Homepage @ https://chrishayward.xyz
# + Athabasca @ https://login.athabascau.ca/cas/login
# + Bookshelf @ https://online.vitalsource.com

# #+begin_src emacs-lisp
# (use-package dashboard
#   :custom (dashboard-center-content t)
#           (dashboard-set-init-info t)
#           (dashboard-set-file-icons t)
#           (dashboard-set-heading-icons t)
#           (dashboard-set-navigator t)
#           (dashboard-startup-banner 'logo)
#           (dashboard-projects-backend 'projectile)
#           (dashboard-items '((projects . 5) (recents  . 5) (agenda . 10)))
#           (dashboard-navigator-buttons `(((,(all-the-icons-fileicon "brain" :height 1.1 :v-adjust 0.0)
#                                           "Brain" "Knowledge base"
#                                           (lambda (&rest _) (browse-url "http://localhost:8080"))))
#                                          ((,(all-the-icons-material "public" :height 1.1 :v-adjust 0.0)
#                                           "Homepage" "Personal website"
#                                           (lambda (&rest _) (browse-url "https://chrishayward.xyz"))))
#                                          ((,(all-the-icons-faicon "university" :height 1.1 :v-adjust 0.0)
#                                           "Athabasca" "Univeristy login"
#                                           (lambda (&rest _) (browse-url "https://login.athabascau.ca/cas/login"))))
#                                          ((,(all-the-icons-faicon "book" :height 1.1 :v-adjust 0.0)
#                                           "Bookshelf" "Vitalsource bookshelf"
#                                           (lambda (&rest _) (browse-url "https://online.vitalsource.com"))))))
#   :config (dashboard-setup-startup-hook))
# #+end_src

# When running in *daemon* mode, ensure that the dashboard is the initial buffer.

# #+begin_src emacs-lisp
# (setq initial-buffer-choice
#       (lambda ()
#         (get-buffer "*dashboard*")))
# #+end_src
