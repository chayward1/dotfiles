#+TITLE: Development
#+AUTHOR: Christopher James Hayward
#+EMAIL: chris@chrishayward.xyz

#+PROPERTY: header-args:emacs-lisp :tangle development.el :comments org
#+PROPERTY: header-args:shell      :tangle no
#+PROPERTY: header-args            :results silent :eval no-export :comments org

#+OPTIONS: num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS: skip:nil author:nil email:nil creator:nil timestamp:nil

Support for individual programming languages, has a hard dependency on the [[file:projects.org][Projects]] module for integration with *LSP*[fn:1] / *DAP*[fn:2]

* HTTP

Interactive with *HTTP* endpoints using the *ob-http*[fn:6] package. You can see how it works in my post [[file:../docs/posts/kanye-as-a-service.org.gpg][Kanye as a Service]]. Essentialy it adds interactive *HTTP* blocks that can output their results in place.

#+begin_src emacs-lisp
(use-package ob-http
  :after org
  :config (org-babel-do-load-languages
            'org-babel-load-languages '((http . t))))
#+end_src

* YAML

Support for YAML files.

#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src

* C/C++

Add support for the *C/C++* family of languages via the *CCLS*[fn:7] language server.

+ Install requirements
+ Integrate with *LSP*[fn:2]
+ Integrate with *DAP*[fn:1]
+ Load babel language modules
+ Create new structure templates
  * ~<cc~ for *C*
  * ~<cpp~ for *C++*

#+begin_src emacs-lisp
(use-package ccls
  :hook ((c-mode c++-mode objc-mode cuda-mode) .
         (lambda ()
           (require 'ccls)
           (lsp-deferred)))
  :config (add-to-list 'org-structure-template-alist '("cc" . "src C"))
          (add-to-list 'org-structure-template-alist '("cpp" . "src C++"))
          (org-babel-do-load-languages 'org-babel-load-languages '((C . t))))
#+end_src

* PlantUML

Download and install *PlantUML*[fn:8], a text-based markup language for creating UML diagrams. You can read my notes about the tool [[file:../docs/notes/plantuml.org.gpg][PlantUML]] here. Support added through the *plantuml-mode*[fn:9] package.

+ Install requirements
+ Load the babel module for *PlantUML*[fn:8]
+ Create a structure template with ~<pl~
+ Toggle inline imagines with =SPC t i=

#+begin_src emacs-lisp
(use-package plantuml-mode
  :after org
  :custom (plantuml-default-exec-mode 'jar)
          (plantuml-jar-path "~/.local/bin/plantuml.jar")
          (org-plantuml-jar-path (expand-file-name "~/.local/bin/plantuml.jar"))
          (org-startup-with-inline-images t)
  :config (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
          (add-to-list 'org-structure-template-alist '("pl" . "src plantuml"))
          (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
          (dotfiles/leader "ti" '(org-toggle-inline-images :which-key "Images")))
#+end_src

* Footnotes

[fn:1] https://microsoft.github.io/debug-adapter-protocol

[fn:2] https://microsoft.github.io/language-server-protocol

[fn:3] https://golang.org

[fn:4] https://pkg.go.dev/golang.org/x/tools/gopls

[fn:5] https://emacswiki.org/emacs/GoMode

[fn:6] https://github.com/zweifisch/ob-http

[fn:7] https://github.com/MaskRay/ccls

[fn:8] https://plantuml.com

[fn:9] https://github.com/skuro/plantuml-mode

[fn:10] https://pypi.org/project/python-language-server/

[fn:11] https://emacswiki.org/emacs/PythonProgrammingInEmacs

[fn:12] https://python.org
